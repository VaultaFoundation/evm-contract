#include "basic_evm_tester.hpp"
#include <silkworm/execution/address.hpp>

using intx::operator""_u256;

using namespace evm_test;
using eosio::testing::eosio_assert_message_is;
struct exec_output_row {
  uint64_t    id;
  exec_output output;
};
FC_REFLECT(exec_output_row, (id)(output))

struct exec_evm_tester : basic_evm_tester {
    exec_evm_tester() {
      create_accounts({"alice"_n});
      transfer_token(faucet_account_name, "alice"_n, make_asset(10000'0000));
      init();
    }

    evmc::address deploy_evm_token_contract(evm_eoa& eoa) {

      // tests/leap/nodeos_eos_evm_server/contracts/Token.sol
      const std::string token_bytecode = 
          "60806040523480156200001157600080fd5b506040518060400160405280600781526020017f59756e69706572000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f59554e000000000000000000000000000000000000000000000000000000000081525081600390816200008f9190620004e6565b508060049081620000a19190620004e6565b505050620000e633620000b9620000ec60201b60201c565b60ff16600a620000ca919062000750565b620f4240620000da9190620007a1565b620000f560201b60201c565b620008d8565b60006012905090565b600073ffffffffffffff"
          "ffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000167576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200015e906200084d565b60405180910390fd5b6200017b600083836200026260201b60201c565b80600260008282546200018f91906200086f565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffff"
          "ffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620002429190620008bb565b60405180910390a36200025e600083836200026760201b60201c565b5050565b505050565b505050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002ee57607f821691505b6020821081036200030457620003036200"
          "02a6565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200036e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200032f565b6200037a86836200032f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003c7620003c1620003bb8462000392565b6200039c565b62000392565b9050919050565b6000819050919050565b620003e383620003a6565b620003fb620003f282620003ce565b8484546200033c565b82555050"
          "5050565b600090565b6200041262000403565b6200041f818484620003d8565b505050565b5b8181101562000447576200043b60008262000408565b60018101905062000425565b5050565b601f821115620004965762000460816200030a565b6200046b846200031f565b810160208510156200047b578190505b620004936200048a856200031f565b83018262000424565b50505b505050565b600082821c905092915050565b6000620004bb600019846008026200049b565b1980831691505092915050565b6000620004d68383620004a8565b9150826002028217905092915050565b620004f1826200026c565b67ffffffffffffffff8111156200"
          "050d576200050c62000277565b5b620005198254620002d5565b620005268282856200044b565b600060209050601f8311600181146200055e576000841562000549578287015190505b620005558582620004c8565b865550620005c5565b601f1984166200056e866200030a565b60005b82811015620005985784890151825560018201915060208501945060208101905062000571565b86831015620005b85784890151620005b4601f891682620004a8565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600081"
          "60011c9050919050565b6000808291508390505b60018511156200065b57808604811115620006335762000632620005cd565b5b6001851615620006435780820291505b80810290506200065385620005fc565b945062000613565b94509492505050565b60008262000676576001905062000749565b8162000686576000905062000749565b81600181146200069f5760028114620006aa57620006e0565b600191505062000749565b60ff841115620006bf57620006be620005cd565b5b8360020a915084821115620006d957620006d8620005cd565b5b5062000749565b5060208310610133831016604e8410600b84101617156200071a5782820a90"
          "5083811115620007145762000713620005cd565b5b62000749565b62000729848484600162000609565b92509050818404811115620007435762000742620005cd565b5b81810290505b9392505050565b60006200075d8262000392565b91506200076a8362000392565b9250620007997fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000664565b905092915050565b6000620007ae8262000392565b9150620007bb8362000392565b9250828202620007cb8162000392565b91508282048414831517620007e557620007e4620005cd565b5b5092915050565b600082825260208201905092915050565b7f45"
          "524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600062000835601f83620007ec565b91506200084282620007fd565b602082019050919050565b60006020820190508181036000830152620008688162000826565b9050919050565b60006200087c8262000392565b9150620008898362000392565b9250828201905080821115620008a457620008a3620005cd565b5b92915050565b620008b58162000392565b82525050565b6000602082019050620008d26000830184620008aa565b92915050565b61122f80620008e86000396000f3fe608060405234801561001057600080fd5b50600436106100"
          "a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610b0c565b60405180910390f35b6100e660048036038101906100e19190610bc7565b610308565b6040516100f39190610c22565b60405180910390f35b61010461032b565b6040516101119190610c4c565b604051809103"
          "90f35b610134600480360381019061012f9190610c67565b610335565b6040516101419190610c22565b60405180910390f35b610152610364565b60405161015f9190610cd6565b60405180910390f35b610182600480360381019061017d9190610bc7565b61036d565b60405161018f9190610c22565b60405180910390f35b6101b260048036038101906101ad9190610cf1565b6103a4565b6040516101bf9190610c4c565b60405180910390f35b6101d06103ec565b6040516101dd9190610b0c565b60405180910390f35b61020060048036038101906101fb9190610bc7565b61047e565b60405161020d9190610c22565b60405180910390f35b61"
          "0230600480360381019061022b9190610bc7565b6104f5565b60405161023d9190610c22565b60405180910390f35b610260600480360381019061025b9190610d1e565b610518565b60405161026d9190610c4c565b60405180910390f35b60606003805461028590610d8d565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610d8d565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b60008061031361059f565b90506103"
          "208185856105a7565b600191505092915050565b6000600254905090565b60008061034061059f565b905061034d858285610770565b6103588585856107fc565b60019150509392505050565b60006012905090565b60008061037861059f565b905061039981858561038a8589610518565b6103949190610ded565b6105a7565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546103fb90610d8d565b80601f01602080910402602001604051908101604052809291908181"
          "5260200182805461042790610d8d565b80156104745780601f1061044957610100808354040283529160200191610474565b820191906000526020600020905b81548152906001019060200180831161045757829003601f168201915b5050505050905090565b60008061048961059f565b905060006104978286610518565b9050838110156104dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d390610e93565b60405180910390fd5b6104e982868684036105a7565b60019250505092915050565b60008061050061059f565b905061050d8185856107fc565b60019150509291505056"
          "5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060d90610f25565b60405180910390fd5b60"
          "0073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610685576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067c90610fb7565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffff"
          "ffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107639190610c4c565b60405180910390a3505050565b600061077c8484610518565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107f657818110156107e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107df90611023565b60405180910390fd5b6107f584848484036105a7565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ff"
          "ffffffffffffffffffffffffffffffffffffff160361086b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610862906110b5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d190611147565b60405180910390fd5b6108e5838383610a72565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16"
          "81526020019081526020016000205490508181101561096b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610962906111d9565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffff"
          "ffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a599190610c4c565b60405180910390a3610a6c848484610a77565b50505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ab6578082015181840152602081019050610a9b565b60008484015250505050565b6000601f19601f8301169050919050565b6000610ade82610a7c565b610ae88185610a87565b9350610af8818560208601610a98565b610b0181610ac2565b840191505092915050565b6000602082019050818103"
          "6000830152610b268184610ad3565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b5e82610b33565b9050919050565b610b6e81610b53565b8114610b7957600080fd5b50565b600081359050610b8b81610b65565b92915050565b6000819050919050565b610ba481610b91565b8114610baf57600080fd5b50565b600081359050610bc181610b9b565b92915050565b60008060408385031215610bde57610bdd610b2e565b5b6000610bec85828601610b7c565b9250506020610bfd85828601610bb2565b9150509250929050565b60008115159050919050565b610c1c81"
          "610c07565b82525050565b6000602082019050610c376000830184610c13565b92915050565b610c4681610b91565b82525050565b6000602082019050610c616000830184610c3d565b92915050565b600080600060608486031215610c8057610c7f610b2e565b5b6000610c8e86828701610b7c565b9350506020610c9f86828701610b7c565b9250506040610cb086828701610bb2565b9150509250925092565b600060ff82169050919050565b610cd081610cba565b82525050565b6000602082019050610ceb6000830184610cc7565b92915050565b600060208284031215610d0757610d06610b2e565b5b6000610d1584828501610b7c565b9150"
          "5092915050565b60008060408385031215610d3557610d34610b2e565b5b6000610d4385828601610b7c565b9250506020610d5485828601610b7c565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610da557607f821691505b602082108103610db857610db7610d5e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610df882610b91565b9150610e0383610b91565b9250828201905080821115610e1b57610e1a610d"
          "be565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000610e7d602583610a87565b9150610e8882610e21565b604082019050919050565b60006020820190508181036000830152610eac81610e70565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000610f0f602483610a87565b9150610f1a82610e"
          "b3565b604082019050919050565b60006020820190508181036000830152610f3e81610f02565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000610fa1602283610a87565b9150610fac82610f45565b604082019050919050565b60006020820190508181036000830152610fd081610f94565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061100d601d83610a87565b915061101882610fd756"
          "5b602082019050919050565b6000602082019050818103600083015261103c81611000565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061109f602583610a87565b91506110aa82611043565b604082019050919050565b600060208201905081810360008301526110ce81611092565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f657373000000000000000000000000000000000000000000000000"
          "0000000000602082015250565b6000611131602383610a87565b915061113c826110d5565b604082019050919050565b6000602082019050818103600083015261116081611124565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006111c3602683610a87565b91506111ce82611167565b604082019050919050565b600060208201905081810360008301526111f2816111b6565b905091905056fea26469706673582212209f06a5f990bd2f3566d6e762a8f54261d285a7dd"
          "ad2b5e289965e9058fa33af264736f6c63430008110033";

      // Deploy token contract
      return deploy_contract(eoa, evmc::from_hex(token_bytecode).value());
    }

    void erc20_transfer(const evmc::address& contract_addr, evm_eoa& evm1, const evm_eoa& evm2, uint64_t amount) {

      auto txn = generate_tx(contract_addr, 0, 500'000);

      silkworm::Bytes data;
      data += evmc::from_hex("a9059cbb").value();   // sha3(transfer(address,uint256))[:4]
      data += silkworm::to_bytes32(evm2.address);   // to
      data += evmc::bytes32{amount};                // value
      txn.data = data;

      evm1.sign(txn);
      pushtx(txn);
    }

    transaction_trace_ptr erc20_balance(const evmc::address& contract_addr, const evm_eoa& account, std::optional<exec_callback> callback={}, std::optional<bytes> context={}) {
      exec_input input;
      input.context = context;
      input.to = bytes{std::begin(contract_addr.bytes), std::end(contract_addr.bytes)};

      silkworm::Bytes data;
      data += evmc::from_hex("70a08231").value();   // sha3(balanceOf(address))[:4]
      data += silkworm::to_bytes32(account.address);
      input.data = bytes{data.begin(), data.end()};

      return exec(input, callback);
    }

};

BOOST_AUTO_TEST_SUITE(exec_evm_tests)
BOOST_FIXTURE_TEST_CASE(read_erc20_balance_from_return_value, exec_evm_tester) try {

  // Fund evm1 address with 100 EOS
  evm_eoa evm1;
  const int64_t to_bridge = 1000000;
  transfer_token("alice"_n, "evm"_n, make_asset(to_bridge), evm1.address_0x());

  // Deploy contract
  auto token_addr = deploy_evm_token_contract(evm1);

  // Transfer 1234 YUN
  evm_eoa evm2;
  erc20_transfer(token_addr, evm1, evm2, 1234);

  // Read evm2 balance
  auto res = erc20_balance(token_addr, evm2);
  
  BOOST_REQUIRE(res);
  BOOST_REQUIRE(res->action_traces.size() == 1);

  // Since callback information was not provided the result of the
  // execution is returned in the action return_value
  auto out = fc::raw::unpack<exec_output>(res->action_traces[0].return_value);
  BOOST_REQUIRE(out.status == 0);
  BOOST_REQUIRE(out.data.size() == 32);

  auto balance = intx::be::unsafe::load<intx::uint256>(reinterpret_cast<const uint8_t*>(out.data.data()));
  BOOST_REQUIRE(balance == 1234);

} FC_LOG_AND_RETHROW()

BOOST_FIXTURE_TEST_CASE(read_erc20_balance_in_callback, exec_evm_tester) try {

  // Create the account that will receive the callback
  // and set the handling code that will store the callback data into a table
  create_accounts({"receiver"_n});
  set_code("receiver"_n, testing::contracts::evm_read_callback_wasm());
  set_abi("receiver"_n, testing::contracts::evm_read_callback_abi().data());

  // Fund evm1 address with 100 EOS
  evm_eoa evm1;
  const int64_t to_bridge = 1000000;
  transfer_token("alice"_n, "evm"_n, make_asset(to_bridge), evm1.address_0x());

  // Deploy contract
  auto token_addr = deploy_evm_token_contract(evm1);

  // Transfer 4321 YUN
  evm_eoa evm2;
  erc20_transfer(token_addr, evm1, evm2, 4321);

  // Read evm2 balance (the result will be stored in the state)
  erc20_balance(token_addr, evm2, exec_callback{"receiver"_n, "callback"_n});
  auto row = fc::raw::unpack<exec_output_row>(get_row_by_account( "receiver"_n, "receiver"_n, "output"_n, name{0}));

  BOOST_REQUIRE(row.output.status == 0);
  BOOST_REQUIRE(row.output.data.size() == 32);
  BOOST_REQUIRE(row.output.context.has_value() == false);

  auto balance = intx::be::unsafe::load<intx::uint256>(reinterpret_cast<const uint8_t*>(row.output.data.data()));
  BOOST_REQUIRE(balance == 4321);

} FC_LOG_AND_RETHROW()

BOOST_FIXTURE_TEST_CASE(exec_non_view_function, exec_evm_tester) try {

  // Fund evm1 address with 100 EOS
  evm_eoa evm1;
  const int64_t to_bridge = 1000000;
  transfer_token("alice"_n, "evm"_n, make_asset(to_bridge), evm1.address_0x());

  // Deploy contract
  auto token_addr = deploy_evm_token_contract(evm1);

  // Try to transfer 1111 YUN tokens from evm1 to evm2 using the exec action
  evm_eoa evm2;

  silkworm::Bytes data;
  data += evmc::from_hex("a9059cbb").value();   // sha3(transfer(address,uint256))[:4]
  data += silkworm::to_bytes32(evm2.address);   // to
  data += evmc::bytes32{1111};                  // value

  exec_input input;
  input.context = {};
  input.from    = bytes{std::begin(evm1.address.bytes), std::end(evm1.address.bytes)};
  input.to      = bytes{std::begin(token_addr.bytes), std::end(token_addr.bytes)};
  input.data    = bytes{data.begin(), data.end()};
  input.value   = {};

  exec(input, {});

  // Read evm1 balance
  auto res = erc20_balance(token_addr, evm1);

  auto out = fc::raw::unpack<exec_output>(res->action_traces[0].return_value);
  BOOST_REQUIRE(out.status == 0);
  BOOST_REQUIRE(out.data.size() == 32);

  auto balance = intx::be::unsafe::load<intx::uint256>(reinterpret_cast<const uint8_t*>(out.data.data()));
  BOOST_REQUIRE(balance == 1000000000000000000000000_u256);

} FC_LOG_AND_RETHROW()

BOOST_FIXTURE_TEST_CASE(exec_with_context, exec_evm_tester) try {

  // Fund evm1 address with 100 EOS
  evm_eoa evm1;
  const int64_t to_bridge = 1000000;
  transfer_token("alice"_n, "evm"_n, make_asset(to_bridge), evm1.address_0x());

  // Deploy contract
  auto token_addr = deploy_evm_token_contract(evm1);

  const char context[] = "ABCD";

  // Recover context (action trace)
  auto res = erc20_balance(token_addr, evm1, {}, bytes{std::begin(context), std::end(context)});
  auto out = fc::raw::unpack<exec_output>(res->action_traces[0].return_value);
  BOOST_REQUIRE(out.context.has_value() == true);
  const auto& ctx = out.context.value();
  dlog("ctx: ${c}", ("c",ctx));
  BOOST_REQUIRE(memcmp(ctx.data(), context, strlen(context))==0);

  // Recover context (callback)
  create_accounts({"receiver"_n});
  set_code("receiver"_n, testing::contracts::evm_read_callback_wasm());
  set_abi("receiver"_n, testing::contracts::evm_read_callback_abi().data());

  erc20_balance(token_addr, evm1, exec_callback{"receiver"_n, "callback"_n}, bytes{std::begin(context), std::end(context)-1});
  auto row = fc::raw::unpack<exec_output_row>(get_row_by_account( "receiver"_n, "receiver"_n, "output"_n, name{0}));

  BOOST_REQUIRE(row.output.context.has_value() == true);
  const auto& ctx2 = row.output.context.value();
  dlog("ctx: ${c}", ("c",ctx2));
  BOOST_REQUIRE(memcmp(ctx2.data(), context, strlen(context)) == 0);

} FC_LOG_AND_RETHROW()


BOOST_FIXTURE_TEST_CASE(wrong_input_params, exec_evm_tester) try {

  exec_input input;

  // No "to" specified
  BOOST_REQUIRE_EXCEPTION(exec(input, {}),
                          eosio_assert_message_exception, eosio_assert_message_is("wrong length"));

  // At least "to" must be specified
  evm_eoa evm1;
  input.to = bytes{std::begin(evm1.address.bytes), std::end(evm1.address.bytes)};
  exec(input, {});

  // Correct length for "from"
  input.from = bytes{std::begin(evm1.address.bytes), std::end(evm1.address.bytes)};
  exec(input, {});

  // Incorrect length for "from"
  input.from = bytes{std::begin(evm1.address.bytes), std::end(evm1.address.bytes)-1};
  BOOST_REQUIRE_EXCEPTION(exec(input, {}),
                          eosio_assert_message_exception, eosio_assert_message_is("wrong length"));

} FC_LOG_AND_RETHROW()

BOOST_AUTO_TEST_SUITE_END()